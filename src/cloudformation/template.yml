# Many thanks to: https://github.com/nathanpeck/aws-cloudformation-fargate/blob/master/fargate-networking-stacks/public-vpc.yml
Parameters:
  Env:
    Type: String
    Default: staging
    AllowedValues:
      - staging
      - prod
  JanisBuilderBaseEcrName:
    Type: String
    Default: "cityofaustin/janis_builder_base"
  JanisBuilderEcrName:
    Type: String
    Default: "cityofaustin/janis_builder"
  RdsMasterUsername:
    Type: String
  RdsMasterPw:
    Type: String

Resources:
  ########
  # VPC
  ########
  # VPC in which containers will be networked.
  # It has two public subnets, two private subnets.
  # The public subnets will host our Fargate containers and Bastion server.
  # The private subnets will host our RDS instance.
  # We distribute the subnets across the first two available subnets for the region, for high availability.
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: '10.0.0.0/16'
      EnableDnsSupport: true
      EnableDnsHostnames: true
  PublicSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: '10.0.0.0/24'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  PublicSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: '10.0.1.0/24'
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
  PrivateSubnetOne:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 0
         - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: '10.0.2.0/24'
      VpcId: !Ref VPC
  PrivateSubnetTwo:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone:
         Fn::Select:
         - 1
         - Fn::GetAZs: !Ref AWS::Region
      CidrBlock: '10.0.3.0/24'
      VpcId: !Ref VPC

  ########
  # Public Subnet Routes
  ########
  # Public Subnet Configuration
  # Setup networking resources for the public subnets. Containers
  # in the public subnets have public IP addresses and the routing table
  # sends network traffic via the internet gateway.
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachement:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref 'VPC'
      InternetGatewayId: !Ref 'InternetGateway'
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachement
    Properties:
      RouteTableId: !Ref 'PublicRouteTable'
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref 'InternetGateway'
  PublicSubnetOneRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetOne
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetTwoRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetTwo
      RouteTableId: !Ref PublicRouteTable

  ########
  # Private Subnet Routes
  ########
  # Our Global ElasticIP allocation is now increased from 5 to 20.
  # EIPs are required for each NatGateway.
  NatGatewayOneAttachment:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayTwoAttachment:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachement
    Properties:
        Domain: vpc
  NatGatewayOne:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayOneAttachment.AllocationId
      SubnetId: !Ref PublicSubnetOne
  NatGatewayTwo:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayTwoAttachment.AllocationId
      SubnetId: !Ref PublicSubnetTwo
  PrivateRouteTableOne:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateRouteOne:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayOne
  PrivateRouteTableOneAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableOne
      SubnetId: !Ref PrivateSubnetOne
  PrivateRouteTableTwo:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref 'VPC'
  PrivateRouteTwo:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGatewayTwo
  PrivateRouteTableTwoAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTableTwo
      SubnetId: !Ref PrivateSubnetTwo

  ########
  # ECS
  ########
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: 'coa-publisher'

  # A security group for the containers we will run in our ECS Cluster.
  ClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the coa-publisher cluster containers
      VpcId: !Ref 'VPC'

  # This is an IAM role which authorizes ECS to manage resources on your
  # account on your behalf, such as updating your load balancer with the
  # details of where your containers are, so that traffic can reach your
  # containers.
  # TODO: is this required if I don't have a load balancer?
  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'coa-publisher-ecs'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              # Rules which allow ECS to attach network interfaces to instances
              # on your behalf in order for awsvpc networking mode to work right
              - 'ec2:AttachNetworkInterface'
              - 'ec2:CreateNetworkInterface'
              - 'ec2:CreateNetworkInterfacePermission'
              - 'ec2:DeleteNetworkInterface'
              - 'ec2:DeleteNetworkInterfacePermission'
              - 'ec2:Describe*'
              - 'ec2:DetachNetworkInterface'
            Resource: '*'

  # This is a role which is used by the ECS Fargate tasks themselves.
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'coa-publisher-task-execution'
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ecs-tasks.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:CreateLogStream'
                - 'logs:PutLogEvents'
              Resource: '*'
            - Effect: Allow
              Action:
                # allow GET/PUT for objects in coa-publisher-codebuild s3 bucket
                - 's3:GetBucketLocation'
                - 's3:GetObject'
                - 's3:DeleteObject'
                - 's3:PutObject'
              Resource: 'arn:aws:s3:::coa-publisher/*'
            - Effect: Allow
              Action:
                # get permission to pull janis_builder_base image from ECR
                - "ecr:GetAuthorizationToken"
                - "ecr:GetDownloadUrlForLayer"
                - "ecr:BatchGetImage"
                - "ecr:BatchCheckLayerAvailability"
              Resource: '*'

  ########
  # RDS
  ########
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to Postgres
      VpcId:
        Ref: VPC

  ClusterRDSIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: '5432'
      ToPort: '5432'
      SourceSecurityGroupId:
        Ref: ClusterSecurityGroup
      GroupId:
        Ref: RDSSecurityGroup

  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: RDS Subnet Group
      SubnetIds:
        - Ref: PrivateSubnetOne
        - Ref: PrivateSubnetTwo

  RDS:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AvailabilityZone: !Sub ${AWS::Region}a
      DBName: 'postgres'
      BackupRetentionPeriod: 14
      AllocatedStorage: 5
      DBInstanceClass: 'db.t2.micro'
      DBInstanceIdentifier: !Sub "coa-publisher-${Env}"
      DBSubnetGroupName:
        Ref: RDSSubnetGroup
      DeletionProtection: true
      AllowMajorVersionUpgrade: true
      Engine: 'postgres'
      EngineVersion: '11.5'
      MasterUsername: !Sub "${RdsMasterUsername}"
      MasterUserPassword: !Sub "${RdsMasterPw}"
      PubliclyAccessible: false
      VPCSecurityGroups:
        - Fn::GetAtt:
          - RDSSecurityGroup
          - GroupId
    DeletionPolicy: 'Snapshot'

  ########
  # Logs
  ########
  # Log group for janis-builder tasks
  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /coa-publisher/janis-builder
      RetentionInDays: 14

  ########
  # ECR
  ########
  JanisBuilderBaseEcr:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref JanisBuilderBaseEcrName
  JanisBuilderEcr:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: !Ref JanisBuilderEcrName

  ########
  # CodeBuild
  ########
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Join [ '-', [ 'coa-publisher-janis-builder-factory', !Ref Env ] ]
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: NO_ARTIFACTS
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_MEDIUM
        Image: aws/codebuild/standard:2.0
        PrivilegedMode: true # Required for building docker images and LOCAL caching
        EnvironmentVariables:
          # JANIS_BUILDER_BASE_ECR_URI is required for your janis-builder.Dockerfile to know which repo to pull from
          - Name: JANIS_BUILDER_BASE_ECR_URI
            Type: PLAINTEXT
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${JanisBuilderBaseEcrName}"
          # JANIS_BUILDER_ECR_URI is required for the CodeBuild buildspec.yml to know where to push your docker images after you've built them
          - Name: JANIS_BUILDER_ECR_URI
            Type: PLAINTEXT
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${JanisBuilderEcrName}"
      Source:
        Type: S3
        Location: !Join [ '', ['coa-publisher/janis_builder_factory_source/', !Ref Env, '/'] ]
        BuildSpec: './buildspec.yml'
      TimeoutInMinutes: 20
      Cache:
        Type: LOCAL # Caches Docker layers on AWS Host build machine
        Modes:
          - LOCAL_DOCKER_LAYER_CACHE

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Join [ '-', [ 'coa-publisher-janis-builder-factory', !Ref Env ] ]
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: AmazonECSTaskExecutionRolePolicy
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
                # retrieve custom environment variables stored in Amazon EC2 Systems Manager Parameter Store
                - 'ssm:GetParameters'
                # Allow the ECS tasks to upload logs to CloudWatch
                - 'logs:*'
              Resource: '*'
            - Effect: Allow
              Action:
                # allow reading from coa-publisher-codebuild s3 bucket
                - 's3:ListBucket'
              Resource: 'arn:aws:s3:::coa-publisher'
            - Effect: Allow
              Action:
                # allow GET/PUT for objects in coa-publisher-codebuild s3 bucket
                - 's3:GetBucketLocation'
                - 's3:GetObject'
                - 's3:DeleteObject'
                - 's3:PutObject'
              Resource: 'arn:aws:s3:::coa-publisher/*'
            - Effect: Allow
              Action:
                # get permission to pull janis_builder_base image from ECR
                - "ecr:GetAuthorizationToken"
                - "ecr:GetDownloadUrlForLayer"
                - "ecr:BatchGetImage"
                - "ecr:BatchCheckLayerAvailability"
                - "ecr:InitiateLayerUpload"
                - "ecr:UploadLayerPart"
                - "ecr:CompleteLayerUpload"
                - "ecr:PutImage"
              Resource: '*'

# These are the values output by the CloudFormation template. Be careful
# about changing any of them, because of them are exported with specific
# names so that the other task related CF templates can use them.
Outputs:
  ClusterName:
    Description: The name of the ECS cluster
    Value: !Ref 'ECSCluster'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ClusterName' ] ]
  ECSRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSRole' ] ]
  ECSTaskExecutionRole:
    Description: The ARN of the ECS role
    Value: !GetAtt 'ECSTaskExecutionRole.Arn'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ECSTaskExecutionRole' ] ]
  VPCId:
    Description: The ID of the VPC that this stack is deployed in
    Value: !Ref 'VPC'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'VPCId' ] ]
  PublicSubnetOne:
    Description: Public subnet one
    Value: !Ref 'PublicSubnetOne'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetOne' ] ]
  PublicSubnetTwo:
    Description: Public subnet two
    Value: !Ref 'PublicSubnetTwo'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PublicSubnetTwo' ] ]
  ClusterSecurityGroup:
    Description: A security group used to allow Fargate containers to receive traffic
    Value: !Ref 'ClusterSecurityGroup'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'ClusterSecurityGroup' ] ]
  JanisBuilderBaseEcrUri:
    Description: "The URI for cityofaustin/janis_builder_base ECR repo"
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${JanisBuilderBaseEcrName}"
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'JanisBuilderBaseEcrUri' ] ]
  JanisBuilderEcrUri:
    Description: "The URI for cityofaustin/janis_builder ECR repo"
    Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${JanisBuilderEcrName}"
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'JanisBuilderEcrUri' ] ]
  PgEndpoint:
    Description: The endpoint for Publisher's Postgres Database
    Value: !GetAtt 'RDS.Endpoint.Address'
    Export:
      Name: !Join [ ':', [ !Ref 'AWS::StackName', 'PgEndpoint' ] ]
